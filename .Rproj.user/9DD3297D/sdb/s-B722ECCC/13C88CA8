{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nrequire(shinysky)\nlibrary(tidyverse)\nlibrary(plotly)\n\nshinyServer(function(input, output) {\n  \n  dados <- read_csv(file = \"dados/series_from_imdb.csv\") %>% select(series_name, series_ep, season, season_ep, Episode, UserRating, UserVotes,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10)\n  \n  output$distPlot <- renderPlotly({\n\n    # generate bins based on input$bins from ui.R\n    dadosFiltrados <- dados %>% filter(series_name == input$seriesNames)\n    #x <- aux$UserRating\n    #y <- aux$series_ep\n    #bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n    # draw the histogram with the specified number of bins\n    #hist(x, breaks = bins, col = 'darkgray', border = 'white')\n    \n    \n    maxRow = dadosFiltrados[which.max(dadosFiltrados$UserRating),]\n    minRow = dadosFiltrados[which.min(dadosFiltrados$UserRating),]\n    \n    maxAndMin <- rbind(minRow, maxRow)\n    \n    a = list(\n      x = maxAndMin$season_ep,\n      y = maxAndMin$UserRating,\n      text = c(\"Pior episodio\", \"Melhor episodio\"),\n      xref = \"x\",\n      yref = \"y\",\n      ax = 30,\n      showarrow = TRUE,\n      arrowhead = 2,\n      arrowsize = .5,\n      font = list(family = \"bank gothic\", size = 14),\n      xanchor = \"left\"\n    )\n    \n    l <- list(\n      x = 1.05,\n      y = 0.1,\n      font = list(\n        family = \"bank gothic\",\n        size = 10,\n        color = \"#000\"),\n      bgcolor = \"white\",\n      bordercolor = \"white\",\n      borderwidth = 1)\n    \n    \n    \n    plot_ly(dadosFiltrados %>% mutate(season = paste(\"Temporada\", season)),\n            x = ~season_ep,\n            y = ~UserRating,\n            color = ~as.character(season),\n            type = \"scatter\",\n            mode = \"lines+markers\",\n            colors = \"Set1\",\n            marker = list(size = ~UserVotes/input$sizePoints),\n            text = ~paste(\"<b>Episodio\",season_ep, \"</b><br>\" , Episode, \"<br>Nota: \", UserRating, \"<br>Total de votos:\", UserVotes),\n            hoverinfo = \"text\",\n            source = \"subset\"\n            ) %>%\n      layout(\n        autosize = TRUE,\n        title = ~paste(\"Evolução do rating de\", series_name),\n        xaxis = list(title = \"Episódio da Temporada\"),\n        yaxis = list(title = \"Rating dos usuários\"),\n        annotations = a,\n        legend = l\n      )\n\n  })\n  \n  output$seriesNames <- renderUI({\n    nomes <- as.list(unique(dados %>% arrange(series_name) %>% select(series_name)))\n\n    selectInput(\"seriesNames\", \"Escolha uma série\", nomes) \n  })\n  \n  output$plotSelected <- renderPlotly({\n    event.data <- event_data(\"plotly_selected\", source = \"subset\")\n    if(is.null(event.data) == T) return(NULL)\n    else {    \n      dadosFiltrados <- dados %>% filter(series_name == input$seriesNames)\n      #as.list(event.data)\n      teste <- dadosFiltrados %>% filter((as.integer(substr(season, 0, length(season))) - 1) %in% event.data$curveNumber & \n                                           season_ep %in% event.data$x & \n                                           UserRating %in% event.data$y)\n       #teste\n       #https://plot.ly/r/shiny-coupled-events/\n            plot_ly(teste , x = ~season_ep, y = ~UserRating, type = \"bar\", color = ~as.character(season), colors = \"Set2\")\n    }\n  })\n  \n  output$pointInfo <- renderPlotly({\n    \n    event.data <- event_data(\"plotly_click\", source = \"subset\")\n    if(is.null(event.data)) return(NULL)\n    else{\n      dadosFiltrados <- dados %>% filter(series_name == input$seriesNames)\n      #as.list(event.data)\n      teste <- dadosFiltrados %>% filter((as.integer(substr(season, 0, length(season))) - 1) %in% event.data$curveNumber & \n                                           season_ep %in% event.data$x & \n                                           UserRating %in% event.data$y)\n      \n      plot_ly(teste, x = ~c(1,2,3,4,5,6,7,8,9,10), y = ~c(r1*100,r2*100,r3*100,r4*100,r5*100,r6*100,r7*100,r8*100,r9*100,r10*100), type = \"bar\") %>% layout(yaxis = list(title = \"Porcentagem do total de notas\"), xaxis = list(title = \"Nota\"))\n    }\n    \n  })\n    \n})\n\n",
    "created" : 1497270375172.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2036124772",
    "id" : "13C88CA8",
    "lastKnownWriteTime" : 1497379249,
    "last_content_update" : 1497379249644,
    "path" : "C:/Users/lucas/Desktop/ad1/lab2-cp2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}